{
	"info": {
		"_postman_id": "d683b868-3100-4d99-a144-a96bcd8a1c4e",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "13903415-d683b868-3100-4d99-a144-a96bcd8a1c4e"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "postCreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc33282f-7a98-4503-be32-f605ebc7a832",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful POST request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    token = responseJson.token;\r",
									"    pm.environment.set(\"environmet_token\",token);\r",
									"    console.log(\"Token is: \" + token);\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"token\": {\r",
									"            \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"        \"required\": [\r",
									"            \"token\"\r",
									"        ]\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "591c6dd0-6a0c-4010-98a8-d2e9325bbbb1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"{{username}}\",\r\n    \"password\" : \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "StartFragment\n\nCreates a new auth token to use for access to the PUT and DELETE /booking\n\nEndFragment"
					},
					"response": []
				}
			],
			"id": "e36f03f3-2645-447c-8770-ff0b3990e121"
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "getBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a1ea61e-85ec-41e6-859e-0a8ff9474970",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful GET request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    tests[\"Number of bookings: \"  + responseJson.length] = true;\r",
									"        for(i = 0; i < responseJson.length; i++){    \r",
									"            const booking = responseJson[i];\r",
									"            pm.test(`Booking ${i} is present into the list`, () => {\r",
									"                pm.expect(booking.bookingid).is.not.null;\r",
									"            });\r",
									"        }\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"            \"bookingid\"\r",
									"            ]\r",
									"        },\r",
									"        \"additionalItems\": false\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    // _______________________ZONE FOR SAVING VARIABLES___________________\r",
									"    bookingID_first = responseJson[0].bookingid;\r",
									"    pm.globals.set(\"global_bookingID_first\", bookingID_first);\r",
									"    console.log(\"First Booking ID is: \" + bookingID_first);\r",
									"    // ___________________________________________________________________\r",
									"    bookingID_second = responseJson[1].bookingid;\r",
									"    pm.globals.set(\"global_bookingID_second\", bookingID_second);\r",
									"    console.log(\"Second Booking ID is: \" + bookingID_second);\r",
									"    // ___________________________________________________________________\r",
									"    bookingID_third = responseJson[3].bookingid;\r",
									"    pm.globals.set(\"global_bookingID_third\", bookingID_third);\r",
									"    console.log(\"Third Booking ID is: \" + bookingID_third);\r",
									"    // ___________________________________________________________________\r",
									"    bookings_array = [bookingID_first, bookingID_second, bookingID_third];\r",
									"    pm.globals.set(\"global_bookings_array\", JSON.stringify(bookings_array));\r",
									"    console.log(\"Booking array: \" + bookings_array);\r",
									"    // ___________________________________________________________________\r",
									"    pm.globals.set('global_idIndex', 0);\r",
									"    // ___________________________________________________________________\r",
									"\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a97452f3-4cbc-484b-af01-2670602c8b22",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{environmet_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/booking",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "StartFragment\n\nReturns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.  \n\nEnd"
					},
					"response": []
				},
				{
					"name": "getBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a8cb1bc-b49a-4933-8ac0-4621676b28d8",
								"exec": [
									"let data_booking = pm.globals.get(\"global_booking\");\r",
									"let data_booking_first = pm.globals.get(\"global_bookingID_first\");\r",
									"let data_booking_second = pm.globals.get(\"global_bookingID_second\");\r",
									"let data_booking_third = pm.globals.get(\"global_bookingID_third\");\r",
									"\r",
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful GET request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.test(`All booking details are present into the list`, () => {\r",
									"        pm.expect(responseJson.firstname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"firstname\");\r",
									"\r",
									"        pm.expect(responseJson.lastname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"lastname\");\r",
									"\r",
									"        pm.expect(responseJson.totalprice).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"totalprice\");\r",
									"\r",
									"        pm.expect(responseJson.depositpaid).is.oneOf([true, false]);\r",
									"        pm.expect(responseJson).has.property(\"depositpaid\");\r",
									"\r",
									"        pm.expect(responseJson.bookingdates).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkin).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkout).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"bookingdates\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkin\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkout\");\r",
									"\r",
									"        pm.expect(responseJson.additionalneeds).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"additionalneeds\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"lastname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"totalprice\": {\r",
									"            \"type\": \"integer\"\r",
									"            },\r",
									"            \"depositpaid\": {\r",
									"            \"type\": \"boolean\"\r",
									"            },\r",
									"            \"bookingdates\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"checkin\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"checkout\": {\r",
									"                \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"                \"checkin\",\r",
									"                \"checkout\"\r",
									"            ]\r",
									"            },\r",
									"            \"additionalneeds\": {\r",
									"            \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"        \"required\": [\r",
									"            \"firstname\",\r",
									"            \"lastname\",\r",
									"            \"totalprice\",\r",
									"            \"depositpaid\",\r",
									"            \"bookingdates\",\r",
									"            \"additionalneeds\"\r",
									"        ]\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    // _______________________ZONE FOR SAVING VARIABLES___________________\r",
									"    if(data_booking == data_booking_first){\r",
									"        firstname = responseJson.firstname;\r",
									"        pm.globals.set(\"global_booking_firstname\", firstname);\r",
									"        console.log(\"Booking first name is: \" + firstname);\r",
									"    } else if(data_booking == data_booking_second){\r",
									"        lastname = responseJson.lastname;\r",
									"        pm.globals.set(\"global_booking_lastname\", lastname);\r",
									"        console.log(\"Booking last name is: \" + lastname);\r",
									"    } else if(data_booking == data_booking_third){\r",
									"        totalprice = responseJson.totalprice;\r",
									"        pm.globals.set(\"global_booking_totalprice\", totalprice);\r",
									"        console.log(\"Booking total price is: \" + totalprice);\r",
									"    }\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9049b0f-caeb-4a7d-ab4d-db7ffa1d3df0",
								"exec": [
									"const bookings = JSON.parse(pm.globals.get('global_bookings_array'));\r",
									"let bookingIndex = pm.globals.get('global_idIndex');\r",
									"\r",
									"const booking = bookings[bookingIndex];\r",
									"pm.globals.set('global_booking', booking);\r",
									"console.log(`Current booking: ${booking}`);\r",
									"\r",
									"if (bookingIndex < bookings.length-1){  \r",
									"    bookingIndex++;  \r",
									"    pm.globals.set('global_idIndex', bookingIndex);\r",
									"    postman.setNextRequest(pm.info.requestId);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "77367820-a416-4b9c-a9bc-40d05fcece5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{environmet_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/booking/{{global_booking}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{global_booking}}"
							]
						},
						"description": "StartFragment\n\nReturns a specific booking based upon the booking id provided."
					},
					"response": []
				},
				{
					"name": "postBookingCreate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b6c83b9-6260-467d-b0fc-7a0334ded78a",
								"exec": [
									"const currentDate = require('moment');\r",
									"let today = currentDate();\r",
									"today = today.format(\"YYYY-MM-DD\");\r",
									"\r",
									"let tomorrow = currentDate().add(1, \"day\");\r",
									"tomorrow = tomorrow.format(\"YYYY-MM-DD\");\r",
									"\r",
									"data_firstname = pm.globals.get(\"global_booking_firstname\");\r",
									"data_lastname = pm.globals.get(\"global_booking_lastname\");\r",
									"data_totalprice = pm.globals.get(\"global_booking_totalprice\");\r",
									"data_depositpaid = true;\r",
									"data_checkin = today;\r",
									"data_checkout = tomorrow;\r",
									"data_additionalneeds = \"Launch\";\r",
									"\r",
									"let booking = {};\r",
									"let firstname = data_firstname;\r",
									"booking.firstname = firstname;\r",
									"\r",
									"let lastname = data_lastname;\r",
									"booking.lastname = lastname;\r",
									"\r",
									"let totalprice = data_totalprice;\r",
									"booking.totalprice = totalprice;\r",
									"\r",
									"let depositpaid = data_depositpaid;\r",
									"booking.depositpaid = depositpaid;\r",
									"\r",
									"let bookingdates = {};\r",
									"let checkin = data_checkin;\r",
									"let checkout = data_checkout;\r",
									"bookingdates.checkin = checkin;\r",
									"bookingdates.checkout = checkout;\r",
									"\r",
									"booking.bookingdates = bookingdates;\r",
									"\r",
									"let additionalneeds = data_additionalneeds;\r",
									"booking.additionalneeds = additionalneeds;\r",
									"\r",
									"bookingDetails = JSON.stringify(booking,null,2)\r",
									"console.log(bookingDetails);\r",
									"pm.globals.set(\"global_createBooking\", bookingDetails);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09625977-3e49-4af2-8fb9-5f9a431c2781",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful POST request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.test(`All booking details are present into the list`, () => {\r",
									"        pm.expect(responseJson.bookingid).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"bookingid\");\r",
									"\r",
									"        pm.expect(responseJson.booking).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"booking\");\r",
									"\r",
									"        pm.expect(responseJson.booking.firstname).is.not.null;\r",
									"        pm.expect(responseJson.booking).has.property(\"firstname\");\r",
									"\r",
									"        pm.expect(responseJson.booking.lastname).is.not.null;\r",
									"        pm.expect(responseJson.booking).has.property(\"lastname\");\r",
									"\r",
									"        pm.expect(responseJson.booking.totalprice).is.not.null;\r",
									"        pm.expect(responseJson.booking).has.property(\"totalprice\");\r",
									"\r",
									"        pm.expect(responseJson.booking.depositpaid).is.oneOf([true, false]);\r",
									"        pm.expect(responseJson.booking).has.property(\"depositpaid\");\r",
									"\r",
									"        pm.expect(responseJson.booking.bookingdates).is.not.null;\r",
									"        pm.expect(responseJson.booking.bookingdates.checkin).is.not.null;\r",
									"        pm.expect(responseJson.booking.bookingdates.checkout).is.not.null;\r",
									"        pm.expect(responseJson.booking).has.property(\"bookingdates\");\r",
									"        pm.expect(responseJson.booking.bookingdates).has.property(\"checkin\");\r",
									"        pm.expect(responseJson.booking.bookingdates).has.property(\"checkout\");\r",
									"\r",
									"        pm.expect(responseJson.booking.additionalneeds).is.not.null;\r",
									"        pm.expect(responseJson.booking).has.property(\"additionalneeds\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"            \"type\": \"integer\"\r",
									"            },\r",
									"            \"booking\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"firstname\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"lastname\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"totalprice\": {\r",
									"                \"type\": \"integer\"\r",
									"                },\r",
									"                \"depositpaid\": {\r",
									"                \"type\": \"boolean\"\r",
									"                },\r",
									"                \"bookingdates\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"checkin\": {\r",
									"                    \"type\": \"string\"\r",
									"                    },\r",
									"                    \"checkout\": {\r",
									"                    \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"additionalProperties\": false,\r",
									"                \"required\": [\r",
									"                    \"checkin\",\r",
									"                    \"checkout\"\r",
									"                ]\r",
									"                },\r",
									"                \"additionalneeds\": {\r",
									"                \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"                \"firstname\",\r",
									"                \"lastname\",\r",
									"                \"totalprice\",\r",
									"                \"depositpaid\",\r",
									"                \"bookingdates\",\r",
									"                \"additionalneeds\"\r",
									"            ]\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"        \"required\": [\r",
									"            \"bookingid\",\r",
									"            \"booking\"\r",
									"        ]\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    // _______________________ZONE FOR SAVING VARIABLES___________________\r",
									"        bookingID = responseJson.bookingid;\r",
									"        pm.globals.set(\"global_booking_creationID\", bookingID);\r",
									"        console.log(\"Booking creation ID is: \" + bookingID);\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "41900e96-cd3a-49a1-b37b-b73e90db82b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{environmet_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{global_createBooking}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "StartFragment\n\nCreates a new booking in the API."
					},
					"response": []
				},
				{
					"name": "putBookingUpdate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8403042-4ae1-466a-b33d-09637992ce82",
								"exec": [
									"const currentDate = require('moment');\r",
									"\r",
									"let tomorrow = currentDate().add(1, \"day\");\r",
									"tomorrow = tomorrow.format(\"YYYY-MM-DD\");\r",
									"\r",
									"let year = currentDate().add(1, \"year\");\r",
									"year = year.format(\"YYYY-MM-DD\");\r",
									"\r",
									"data_firstname = pm.globals.get(\"global_booking_firstname\");\r",
									"data_firstname = data_firstname + \"Updated\";\r",
									"data_lastname = pm.globals.get(\"global_booking_lastname\");\r",
									"data_lastname = data_lastname + \"Updated\";\r",
									"data_totalprice = pm.globals.get(\"global_booking_totalprice\");\r",
									"data_totalprice = data_totalprice + 1890;\r",
									"data_depositpaid = true;\r",
									"data_checkin = tomorrow;\r",
									"data_checkout = year;\r",
									"data_additionalneeds = \"LaunchBreak\";\r",
									"\r",
									"let booking = {};\r",
									"let firstname = data_firstname;\r",
									"booking.firstname = firstname;\r",
									"\r",
									"let lastname = data_lastname;\r",
									"booking.lastname = lastname;\r",
									"\r",
									"let totalprice = data_totalprice;\r",
									"booking.totalprice = totalprice;\r",
									"\r",
									"let depositpaid = data_depositpaid;\r",
									"booking.depositpaid = depositpaid;\r",
									"\r",
									"let bookingdates = {};\r",
									"let checkin = data_checkin;\r",
									"let checkout = data_checkout;\r",
									"bookingdates.checkin = checkin;\r",
									"bookingdates.checkout = checkout;\r",
									"\r",
									"booking.bookingdates = bookingdates;\r",
									"\r",
									"let additionalneeds = data_additionalneeds;\r",
									"booking.additionalneeds = additionalneeds;\r",
									"\r",
									"bookingDetails = JSON.stringify(booking,null,2)\r",
									"console.log(bookingDetails);\r",
									"pm.globals.set(\"global_updateBooking\", bookingDetails);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab70d757-6365-4054-9068-338b143361b7",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful PUT request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.test(`All booking details are present into the list`, () => {\r",
									"        pm.expect(responseJson.firstname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"firstname\");\r",
									"\r",
									"        pm.expect(responseJson.lastname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"lastname\");\r",
									"\r",
									"        pm.expect(responseJson.totalprice).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"totalprice\");\r",
									"\r",
									"        pm.expect(responseJson.depositpaid).is.oneOf([true, false]);\r",
									"        pm.expect(responseJson).has.property(\"depositpaid\");\r",
									"\r",
									"        pm.expect(responseJson.bookingdates).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkin).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkout).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"bookingdates\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkin\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkout\");\r",
									"\r",
									"        pm.expect(responseJson.additionalneeds).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"additionalneeds\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"lastname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"totalprice\": {\r",
									"            \"type\": \"integer\"\r",
									"            },\r",
									"            \"depositpaid\": {\r",
									"            \"type\": \"boolean\"\r",
									"            },\r",
									"            \"bookingdates\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"checkin\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"checkout\": {\r",
									"                \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"                \"checkin\",\r",
									"                \"checkout\"\r",
									"            ]\r",
									"            },\r",
									"            \"additionalneeds\": {\r",
									"            \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"        \"required\": [\r",
									"            \"firstname\",\r",
									"            \"lastname\",\r",
									"            \"totalprice\",\r",
									"            \"depositpaid\",\r",
									"            \"bookingdates\",\r",
									"            \"additionalneeds\"\r",
									"        ]\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ca73a044-1144-4bb0-a028-6a37d5471e42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{global_updateBooking}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{global_booking_creationID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{global_booking_creationID}}"
							]
						},
						"description": "StartFragment\n\nUpdates a current booking.\n\n  \n\nEndFra"
					},
					"response": []
				},
				{
					"name": "patchBookingPartialUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29288797-3020-4c5a-ac69-2ebd3bd9cb50",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful PATCH request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.test(`All booking details are present into the list`, () => {\r",
									"        pm.expect(responseJson.firstname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"firstname\");\r",
									"\r",
									"        pm.expect(responseJson.lastname).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"lastname\");\r",
									"\r",
									"        pm.expect(responseJson.totalprice).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"totalprice\");\r",
									"\r",
									"        pm.expect(responseJson.depositpaid).is.oneOf([true, false]);\r",
									"        pm.expect(responseJson).has.property(\"depositpaid\");\r",
									"\r",
									"        pm.expect(responseJson.bookingdates).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkin).is.not.null;\r",
									"        pm.expect(responseJson.bookingdates.checkout).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"bookingdates\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkin\");\r",
									"        pm.expect(responseJson.bookingdates).has.property(\"checkout\");\r",
									"\r",
									"        pm.expect(responseJson.additionalneeds).is.not.null;\r",
									"        pm.expect(responseJson).has.property(\"additionalneeds\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"firstname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"lastname\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"totalprice\": {\r",
									"            \"type\": \"integer\"\r",
									"            },\r",
									"            \"depositpaid\": {\r",
									"            \"type\": \"boolean\"\r",
									"            },\r",
									"            \"bookingdates\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"checkin\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"checkout\": {\r",
									"                \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"                \"checkin\",\r",
									"                \"checkout\"\r",
									"            ]\r",
									"            },\r",
									"            \"additionalneeds\": {\r",
									"            \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"additionalProperties\": false,\r",
									"        \"required\": [\r",
									"            \"firstname\",\r",
									"            \"lastname\",\r",
									"            \"totalprice\",\r",
									"            \"depositpaid\",\r",
									"            \"bookingdates\",\r",
									"            \"additionalneeds\"\r",
									"        ]\r",
									"        };\r",
									"    \r",
									"    pm.test(\"Validating schema\",() => { \r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3a1fa4ba-e1a8-49e9-bd36-4beb1f3a10c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/booking/{{global_booking_creationID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{global_booking_creationID}}"
							]
						},
						"description": "StartFragment\n\nUpdates a current booking with a partial payload.\n\n  \n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "deleteBookingDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66a42b5b-87be-4d14-9867-f189c455a90d",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful DELETE request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseText = pm.response.text();\r",
									"\r",
									"    pm.test(\"Check if status method is Created\", () => {\r",
									"        pm.expect(responseText).to.eql(\"Created\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "78212019-3338-483b-81e8-616b2df61192",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/booking/{{global_booking_creationID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"booking",
								"{{global_booking_creationID}}"
							]
						},
						"description": "StartFragment\n\nReturns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.\n\n  \n\nEndFragment"
					},
					"response": []
				}
			],
			"id": "7f1bc644-f0b1-4757-b205-01ed5739eaac"
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "getHealthCheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "324f0291-876f-4b6d-8fcb-b82b917fccf2",
								"exec": [
									"if(pm.info.iteration === 0){\r",
									"    pm.test(\"Successful GET request\", function () {\r",
									"        pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Status code is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type is present\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain; charset=utf-8');\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"    const responseText = pm.response.text();\r",
									"\r",
									"    pm.test(\"Check if status method is Created\", () => {\r",
									"        pm.expect(responseText).to.eql(\"Created\");\r",
									"    });\r",
									"    // ___________________________________________________________________\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aecbdb7e-2ffb-417e-9ef9-479a4a5afe5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/ping",
							"host": [
								"{{URL}}"
							],
							"path": [
								"ping"
							]
						},
						"description": "StartFragment\n\nA simple health check endpoint to confirm whether the API is up and running.\n\n  \n\nEndFragment"
					},
					"response": []
				}
			],
			"id": "294b6d99-76bc-4d7c-8ba4-2ca06abcc719"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "96e14841-d5e0-46f2-a772-88e9e0093839",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8d5aa781-614e-4805-b22a-e8450ffcf568",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}